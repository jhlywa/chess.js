"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7987],{4399:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"index","title":"chess.js","description":"GitHub Workflow Status","source":"@site/versioned_docs/version-v1.0.0-beta.4/index.md","sourceDirName":".","slug":"/","permalink":"/chess.js/v1.0.0-beta.4/","draft":false,"unlisted":false,"tags":[],"version":"v1.0.0-beta.4","frontMatter":{}}');var o=s(4848),a=s(8453);const i={},c="chess.js",t={},l=[{value:"Installation",id:"installation",level:2},{value:"Example Code",id:"example-code",level:2},{value:"User Interface",id:"user-interface",level:2},{value:"Move &amp; PGN Parsers",id:"move--pgn-parsers",level:2},{value:"API",id:"api",level:2},{value:"Constructor: Chess([ fen ])",id:"constructor-chess-fen-",level:3},{value:".ascii()",id:"ascii",level:3},{value:".board()",id:"board",level:3},{value:".clear()",id:"clear",level:3},{value:".deleteComment()",id:"deletecomment",level:3},{value:".deleteComments()",id:"deletecomments",level:3},{value:".fen()",id:"fen",level:3},{value:".get(square)",id:"getsquare",level:3},{value:".getComment()",id:"getcomment",level:3},{value:".getComments()",id:"getcomments",level:3},{value:".header()",id:"header",level:3},{value:".history([ options ])",id:"history-options-",level:3},{value:".inCheck()",id:"incheck",level:3},{value:".isAttacked(square, color)",id:"isattackedsquare-color",level:3},{value:".isCheckmate()",id:"ischeckmate",level:3},{value:".isDraw()",id:"isdraw",level:3},{value:".isInsufficientMaterial()",id:"isinsufficientmaterial",level:3},{value:".isGameOver()",id:"isgameover",level:3},{value:".isStalemate()",id:"isstalemate",level:3},{value:".isThreefoldRepetition()",id:"isthreefoldrepetition",level:3},{value:".load(fen)",id:"loadfen",level:3},{value:".loadPgn(pgn, [ options ])",id:"loadpgnpgn--options-",level:3},{value:".move(move, [ options ])",id:"movemove--options-",level:3},{value:".move() - Standard Algebraic Notation (SAN)",id:"move---standard-algebraic-notation-san",level:4},{value:".move() - Object Notation",id:"move---object-notation",level:4},{value:".move() - Permissive Parser",id:"move---permissive-parser",level:4},{value:".moves({ piece?: Piece, square?: Square, verbose?: Boolean }?)",id:"moves-piece-piece-square-square-verbose-boolean-",level:3},{value:"Move Objects (e.g. when { verbose: true })",id:"move-objects-eg-when--verbose-true-",level:4},{value:".pgn([ options ])",id:"pgn-options-",level:3},{value:".put(piece, square)",id:"putpiece-square",level:3},{value:".remove(square)",id:"removesquare",level:3},{value:".reset()",id:"reset",level:3},{value:".setComment(comment)",id:"setcommentcomment",level:3},{value:".squareColor(square)",id:"squarecolorsquare",level:3},{value:".turn()",id:"turn",level:3},{value:".undo()",id:"undo",level:3},{value:".validateFen(fen):",id:"validatefenfen",level:3},{value:"BUGS",id:"bugs",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"chessjs",children:"chess.js"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{src:"https://img.shields.io/github/actions/workflow/status/jhlywa/chess.js/node.js.yml",alt:"GitHub Workflow Status"}),"\n",(0,o.jsx)(n.img,{src:"https://img.shields.io/npm/v/chess.js?color=blue",alt:"npm"}),"\n",(0,o.jsx)(n.img,{src:"https://img.shields.io/npm/dm/chess.js",alt:"npm"})]}),"\n",(0,o.jsx)(n.p,{children:"chess.js is a TypeScript chess library used for chess move\ngeneration/validation, piece placement/movement, and check/checkmate/stalemate\ndetection - basically everything but the AI."}),"\n",(0,o.jsx)(n.p,{children:"chess.js has been extensively tested in node.js and most modern browsers."}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(n.p,{children:"Run the following command to install the most recent version of chess.js from\nNPM:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"npm install chess.js\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-code",children:"Example Code"}),"\n",(0,o.jsx)(n.p,{children:"The code below plays a random game of chess:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { Chess } from 'chess.js'\n\nconst chess = new Chess()\n\nwhile (!chess.isGameOver()) {\n  const moves = chess.moves()\n  const move = moves[Math.floor(Math.random() * moves.length)]\n  chess.move(move)\n}\nconsole.log(chess.pgn())\n"})}),"\n",(0,o.jsx)(n.h2,{id:"user-interface",children:"User Interface"}),"\n",(0,o.jsxs)(n.p,{children:["By design chess.js is a headless library and does not include user interface\nelements. Many developers have successfully integrated chess.js with the\n",(0,o.jsx)(n.a,{href:"http://chessboardjs.com",children:"chessboard.js"})," library. See\n",(0,o.jsx)(n.a,{href:"http://chessboardjs.com/examples#5002",children:"chessboard.js - Random vs Random"})," for an\nexample."]}),"\n",(0,o.jsx)(n.h2,{id:"move--pgn-parsers",children:"Move & PGN Parsers"}),"\n",(0,o.jsxs)(n.p,{children:["This library includes two parsers (",(0,o.jsx)(n.code,{children:"permissive"})," and ",(0,o.jsx)(n.code,{children:"strict"}),") which are used to\nparse different forms of chess move notation. The ",(0,o.jsx)(n.code,{children:"permissive"})," parser (the\ndefault) is able to handle many derivates of algebraic notation (e.g. ",(0,o.jsx)(n.code,{children:"Nf3"}),",\n",(0,o.jsx)(n.code,{children:"g1f3"}),", ",(0,o.jsx)(n.code,{children:"g1-f3"}),", ",(0,o.jsx)(n.code,{children:"Ng1f3"}),", ",(0,o.jsx)(n.code,{children:"Ng1-f3"}),", ",(0,o.jsx)(n.code,{children:"Ng1xf3"}),"). The ",(0,o.jsx)(n.code,{children:"strict"})," parser only accepts\nmoves in Standard Algebraic Notation and requires that they strictly adhere to\nthe specification. The ",(0,o.jsx)(n.code,{children:"strict"})," parser runs slightly faster but is much less\nforgiving of non-standard notation."]}),"\n",(0,o.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,o.jsx)(n.h3,{id:"constructor-chess-fen-",children:"Constructor: Chess([ fen ])"}),"\n",(0,o.jsxs)(n.p,{children:["The Chess() constructor takes an optional parameter which specifies the board\nconfiguration in\n",(0,o.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation",children:"Forsyth-Edwards Notation (FEN)"}),".\nThrows an exception if an invalid FEN string is provided."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// board defaults to the starting position when called with no parameters\nconst chess = new Chess()\n\n// pass in a FEN string to load a particular position\nconst chess = new Chess(\n  'r1k4r/p2nb1p1/2b4p/1p1n1p2/2PP4/3Q1NB1/1P3PPP/R5K1 b - - 0 19'\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"ascii",children:".ascii()"}),"\n",(0,o.jsx)(n.p,{children:"Returns a string containing an ASCII diagram of the current position."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\n// make some moves\nchess.move('e4')\nchess.move('e5')\nchess.move('f4')\n\nchess.ascii()\n// -> '   +------------------------+\n//      8 | r  n  b  q  k  b  n  r |\n//      7 | p  p  p  p  .  p  p  p |\n//      6 | .  .  .  .  .  .  .  . |\n//      5 | .  .  .  .  p  .  .  . |\n//      4 | .  .  .  .  P  P  .  . |\n//      3 | .  .  .  .  .  .  .  . |\n//      2 | P  P  P  P  .  .  P  P |\n//      1 | R  N  B  Q  K  B  N  R |\n//        +------------------------+\n//          a  b  c  d  e  f  g  h'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"board",children:".board()"}),"\n",(0,o.jsxs)(n.p,{children:["Returns an 2D array representation of the current position. Empty squares are\nrepresented by ",(0,o.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\nchess.board()\n// -> [[{square: 'a8', type: 'r', color: 'b'},\n        {square: 'b8', type: 'n', color: 'b'},\n        {square: 'c8', type: 'b', color: 'b'},\n        {square: 'd8', type: 'q', color: 'b'},\n        {square: 'e8', type: 'k', color: 'b'},\n        {square: 'f8', type: 'b', color: 'b'},\n        {square: 'g8', type: 'n', color: 'b'},\n        {square: 'h8', type: 'r', color: 'b'}],\n        [...],\n        [...],\n        [...],\n        [...],\n        [...],\n        [{square: 'a1', type: 'r', color: 'w'},\n         {square: 'b1', type: 'n', color: 'w'},\n         {square: 'c1', type: 'b', color: 'w'},\n         {square: 'd1', type: 'q', color: 'w'},\n         {square: 'e1', type: 'k', color: 'w'},\n         {square: 'f1', type: 'b', color: 'w'},\n         {square: 'g1', type: 'n', color: 'w'},\n         {square: 'h1', type: 'r', color: 'w'}]]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"clear",children:".clear()"}),"\n",(0,o.jsx)(n.p,{children:"Clears the board."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"chess.clear()\nchess.fen()\n// -> '8/8/8/8/8/8/8/8 w - - 0 1' <- empty board\n"})}),"\n",(0,o.jsx)(n.h3,{id:"deletecomment",children:".deleteComment()"}),"\n",(0,o.jsx)(n.p,{children:"Delete and return the comment for the current position, if it exists."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'const chess = new Chess()\n\nchess.loadPgn(\'1. e4 e5 2. Nf3 Nc6 3. Bc4 Bc5 {giuoco piano} *\')\n\nchess.getComment()\n// -> "giuoco piano"\n\nchess.deleteComment()\n// -> "giuoco piano"\n\nchess.getComment()\n// -> undefined\n'})}),"\n",(0,o.jsx)(n.h3,{id:"deletecomments",children:".deleteComments()"}),"\n",(0,o.jsx)(n.p,{children:"Delete and return comments for all positions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'const chess = new Chess()\n\nchess.loadPgn(\n  "1. e4 e5 {king\'s pawn opening} 2. Nf3 Nc6 3. Bc4 Bc5 {giuoco piano} *"\n)\n\nchess.deleteComments()\n// -> [\n//     {\n//       fen: "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2",\n//       comment: "king\'s pawn opening"\n//     },\n//     {\n//       fen: "r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3",\n//       comment: "giuoco piano"\n//     }\n//    ]\n\nchess.getComments()\n// -> []\n'})}),"\n",(0,o.jsx)(n.h3,{id:"fen",children:".fen()"}),"\n",(0,o.jsx)(n.p,{children:"Returns the FEN string for the current position. Note, the en passant square is\nonly included if the side-to-move can legally capture en passant."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\n// make some moves\nchess.move('e4')\nchess.move('e5')\nchess.move('f4')\n\nchess.fen()\n// -> 'rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq - 0 2'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"getsquare",children:".get(square)"}),"\n",(0,o.jsx)(n.p,{children:"Returns the piece on the square:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"chess.clear()\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n\nchess.get('a5')\n// -> { type: 'p', color: 'b' },\nchess.get('a6')\n// -> null\n"})}),"\n",(0,o.jsx)(n.h3,{id:"getcomment",children:".getComment()"}),"\n",(0,o.jsx)(n.p,{children:"Retrieve the comment for the current position, if it exists."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\nchess.loadPgn('1. e4 e5 2. Nf3 Nc6 3. Bc4 Bc5 {giuoco piano} *')\n\nchess.getComment()\n// -> \"giuoco piano\"\n"})}),"\n",(0,o.jsx)(n.h3,{id:"getcomments",children:".getComments()"}),"\n",(0,o.jsx)(n.p,{children:"Retrieve comments for all positions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'const chess = new Chess()\n\nchess.loadPgn(\n  "1. e4 e5 {king\'s pawn opening} 2. Nf3 Nc6 3. Bc4 Bc5 {giuoco piano} *"\n)\n\nchess.getComments()\n// -> [\n//     {\n//       fen: "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2",\n//       comment: "king\'s pawn opening"\n//     },\n//     {\n//       fen: "r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3",\n//       comment: "giuoco piano"\n//     }\n//    ]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"header",children:".header()"}),"\n",(0,o.jsx)(n.p,{children:"Allows header information to be added to PGN output. Any number of key/value\npairs can be passed to .header()."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"chess.header('White', 'Robert James Fischer')\nchess.header('Black', 'Mikhail Tal')\n\n// or\n\nchess.header('White', 'Morphy', 'Black', 'Anderssen', 'Date', '1858-??-??')\n"})}),"\n",(0,o.jsx)(n.p,{children:"Calling .header() without any arguments returns the header information as an\nobject."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"chess.header()\n// -> { White: 'Morphy', Black: 'Anderssen', Date: '1858-??-??' }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"history-options-",children:".history([ options ])"}),"\n",(0,o.jsxs)(n.p,{children:["Returns a list containing the moves of the current game. Options is an optional\nparameter which may contain a 'verbose' flag. See .moves() for a description of\nthe verbose move fields. A FEN string of the position ",(0,o.jsx)(n.em,{children:"prior"})," to the move being\nmade is added to the verbose history output."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\nchess.move('e4')\nchess.move('e5')\nchess.move('f4')\nchess.move('exf4')\n\nchess.history()\n// -> ['e4', 'e5', 'f4', 'exf4']\n\nchess.history({ verbose: true })\n// --\x3e\n// [\n//   {\n//     before: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\n//     after: 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1',\n//     color: 'w',\n//     piece: 'p',\n//     from: 'e2',\n//     to: 'e4',\n//     san: 'e4',\n//     lan: 'e2e4',\n//     flags: 'b'\n//   },\n//   {\n//     before: 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1',\n//     after: 'rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2',\n//     color: 'b',\n//     piece: 'p',\n//     from: 'e7',\n//     to: 'e5',\n//     san: 'e5',\n//     lan: 'e7e5',\n//     flags: 'b'\n//   },\n//   {\n//     before: 'rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2',\n//     after: 'rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq - 0 2',\n//     color: 'w',\n//     piece: 'p',\n//     from: 'f2',\n//     to: 'f4',\n//     san: 'f4',\n//     lan: 'f2f4',\n//     flags: 'b'\n//   },\n//   {\n//     before: 'rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq - 0 2',\n//     after: 'rnbqkbnr/pppp1ppp/8/8/4Pp2/8/PPPP2PP/RNBQKBNR w KQkq - 0 3',\n//     color: 'b',\n//     piece: 'p',\n//     from: 'e5',\n//     to: 'f4',\n//     san: 'exf4',\n//     lan: 'e5f4',\n//     flags: 'c',\n//     captured: 'p'\n//   }\n// ]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"incheck",children:".inCheck()"}),"\n",(0,o.jsx)(n.p,{children:"Returns true or false if the side to move is in check."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess(\n  'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3'\n)\nchess.inCheck()\n// -> true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"isattackedsquare-color",children:".isAttacked(square, color)"}),"\n",(0,o.jsx)(n.p,{children:"Returns true if the square is attacked by any piece of the given color."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\nchess.isAttacked('f3', Chess.WHITE)\n// -> true (we can attack empty squares)\n\nchess.isAttacked('f6', Chess.BLACK)\n// -> true (side to move (e.g. the value returned by .turn) is ignored)\n\nchess.load(Chess.DEFAULT_POSITION)\nchess.isAttacked('e2', Chess.WHITE)\n// -> true (we can attack our own pieces)\n\nchess.load('4k3/4n3/8/8/8/8/4R3/4K3 w - - 0 1')\nchess.isAttacked('c6', Chess.BLACK)\n// -> true (pieces still attack a square if even they are pinned)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"ischeckmate",children:".isCheckmate()"}),"\n",(0,o.jsx)(n.p,{children:"Returns true or false if the side to move has been checkmated."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess(\n  'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3'\n)\nchess.isCheckmate()\n// -> true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"isdraw",children:".isDraw()"}),"\n",(0,o.jsx)(n.p,{children:"Returns true or false if the game is drawn (50-move rule or insufficient\nmaterial)."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78')\nchess.isDraw()\n// -> true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"isinsufficientmaterial",children:".isInsufficientMaterial()"}),"\n",(0,o.jsx)(n.p,{children:"Returns true if the game is drawn due to insufficient material (K vs. K, K vs.\nKB, or K vs. KN) otherwise false."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess('k7/8/n7/8/8/8/8/7K b - - 0 1')\nchess.isInsufficientMaterial()\n// -> true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"isgameover",children:".isGameOver()"}),"\n",(0,o.jsx)(n.p,{children:"Returns true if the game has ended via checkmate, stalemate, draw, threefold\nrepetition, or insufficient material. Otherwise, returns false."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\nchess.isGameOver()\n// -> false\n\n// stalemate\nchess.load('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78')\nchess.isGameOver()\n// -> true\n\n// checkmate\nchess.load('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3')\nchess.isGameOver()\n// -> true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"isstalemate",children:".isStalemate()"}),"\n",(0,o.jsx)(n.p,{children:"Returns true or false if the side to move has been stalemated."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78')\nchess.isStalemate()\n// -> true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"isthreefoldrepetition",children:".isThreefoldRepetition()"}),"\n",(0,o.jsx)(n.p,{children:"Returns true or false if the current board position has occurred three or more\ntimes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')\n// -> true\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 1st time\nchess.isThreefoldRepetition()\n// -> false\n\nchess.move('Nf3') chess.move('Nf6') chess.move('Ng1') chess.move('Ng8')\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 2nd time\nchess.isThreefoldRepetition()\n// -> false\n\nchess.move('Nf3') chess.move('Nf6') chess.move('Ng1') chess.move('Ng8')\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 3rd time\nchess.isThreefoldRepetition()\n// -> true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"loadfen",children:".load(fen)"}),"\n",(0,o.jsxs)(n.p,{children:["Clears the board and loads the provided FEN string. The castling rights, en\npassant square and move numbers are defaulted to ",(0,o.jsx)(n.code,{children:"- - 0 1"})," if ommitted. Throws\nan exception if the FEN is invalid."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\nchess.load('4r3/8/2p2PPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45')\n\ntry {\n  chess.load('4r3/8/X12XPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45')\n} catch (e) {\n  console.log(e)\n}\n// -> Error: Invalid FEN: piece data is invalid (invalid piece)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"loadpgnpgn--options-",children:".loadPgn(pgn, [ options ])"}),"\n",(0,o.jsxs)(n.p,{children:["Load the moves of a game stored in\n",(0,o.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/Portable_Game_Notation",children:"Portable Game Notation"}),".\n",(0,o.jsx)(n.code,{children:"pgn"})," should be a string. Options is an optional object which may contain a\nstring ",(0,o.jsx)(n.code,{children:"newlineChar"})," and a boolean ",(0,o.jsx)(n.code,{children:"strict"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"newlineChar"})," is a string representation of a valid RegExp fragment and is\nused to process the PGN. It defaults to ",(0,o.jsx)(n.code,{children:"\\r?\\n"}),". Special characters should not\nbe pre-escaped, but any literal special characters should be escaped as is\nnormal for a RegExp. Keep in mind that backslashes in JavaScript strings must\nthemselves be escaped (see ",(0,o.jsx)(n.code,{children:"sloppyPgn"})," example below). Avoid using a\n",(0,o.jsx)(n.code,{children:"newlineChar"})," that may occur elsewhere in a PGN, such as ",(0,o.jsx)(n.code,{children:"."})," or ",(0,o.jsx)(n.code,{children:"x"}),", as this\nwill result in unexpected behavior."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"strict"})," flag is a boolean (default: ",(0,o.jsx)(n.code,{children:"false"}),") that instructs chess.js to\nonly parse moves in Standard Algebraic Notation form. See ",(0,o.jsx)(n.code,{children:".move"})," documentation\nfor more information about non-SAN notations."]}),"\n",(0,o.jsx)(n.p,{children:"The method will throw and exception if the PGN fails to parse."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\nconst pgn = [\n  '[Event \"Casual Game\"]',\n  '[Site \"Berlin GER\"]',\n  '[Date \"1852.??.??\"]',\n  '[EventDate \"?\"]',\n  '[Round \"?\"]',\n  '[Result \"1-0\"]',\n  '[White \"Adolf Anderssen\"]',\n  '[Black \"Jean Dufresne\"]',\n  '[ECO \"C52\"]',\n  '[WhiteElo \"?\"]',\n  '[BlackElo \"?\"]',\n  '[PlyCount \"47\"]',\n  '',\n  '1.e4 e5 2.Nf3 Nc6 3.Bc4 Bc5 4.b4 Bxb4 5.c3 Ba5 6.d4 exd4 7.O-O',\n  'd3 8.Qb3 Qf6 9.e5 Qg6 10.Re1 Nge7 11.Ba3 b5 12.Qxb5 Rb8 13.Qa4',\n  'Bb6 14.Nbd2 Bb7 15.Ne4 Qf5 16.Bxd3 Qh5 17.Nf6+ gxf6 18.exf6',\n  'Rg8 19.Rad1 Qxf3 20.Rxe7+ Nxe7 21.Qxd7+ Kxd7 22.Bf5+ Ke8',\n  '23.Bd7+ Kf8 24.Bxe7# 1-0',\n]\n\nchess.loadPgn(pgn.join('\\n'))\n\nchess.ascii()\n// -> '  +------------------------+\n//     8 | .  r  .  .  .  k  r  . |\n//     7 | p  b  p  B  B  p  .  p |\n//     6 | .  b  .  .  .  P  .  . |\n//     5 | .  .  .  .  .  .  .  . |\n//     4 | .  .  .  .  .  .  .  . |\n//     3 | .  .  P  .  .  q  .  . |\n//     2 | P  .  .  .  .  P  P  P |\n//     1 | .  .  .  R  .  .  K  . |\n//       +------------------------+\n//         a  b  c  d  e  f  g  h'\n\n// Parse non-standard move formats and unusual line separators\nconst sloppyPgn = [\n  '[Event \"Wijk aan Zee (Netherlands)\"]',\n  '[Date \"1971.01.26\"]',\n  '[Result \"1-0\"]',\n  '[White \"Tigran Vartanovich Petrosian\"]',\n  '[Black \"Hans Ree\"]',\n  '[ECO \"A29\"]',\n  '',\n  '1. Pc2c4 Pe7e5', // non-standard\n  '2. Nc3 Nf6',\n  '3. Nf3 Nc6',\n  '4. g2g3 Bb4', // non-standard\n  '5. Nd5 Nxd5',\n  '6. c4xd5 e5-e4', // non-standard\n  '7. dxc6 exf3',\n  '8. Qb3 1-0',\n].join(':')\n\nchess.loadPgn(sloppyPgn, { newlineChar: ':' })\n// works by default\n\nchess.loadPgn(sloppyPgn, { newlineChar: ':', strict: true })\n// Error: Invalid move in PGN: Pc2c4\n"})}),"\n",(0,o.jsx)(n.h3,{id:"movemove--options-",children:".move(move, [ options ])"}),"\n",(0,o.jsx)(n.p,{children:"Makes a move on the board and returns a move object if the move was legal. The\nmove argument can be either a string in Standard Algebraic Notation (SAN) or a\nmove object. Throws an 'Illegal move' exception if the move was illegal."}),"\n",(0,o.jsx)(n.h4,{id:"move---standard-algebraic-notation-san",children:".move() - Standard Algebraic Notation (SAN)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\nchess.move('e4')\n// -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' }\n\nchess.move('nf6') // SAN is case sensitive!!\n// Error: Invalid move: nf6\n\nchess.move('Nf6')\n// -> { color: 'b', from: 'g8', to: 'f6', flags: 'n', piece: 'n', san: 'Nf6' }\n"})}),"\n",(0,o.jsx)(n.h4,{id:"move---object-notation",children:".move() - Object Notation"}),"\n",(0,o.jsxs)(n.p,{children:["A move object contains ",(0,o.jsx)(n.code,{children:"to"}),", ",(0,o.jsx)(n.code,{children:"from"})," and, ",(0,o.jsx)(n.code,{children:"promotion"})," (only when necessary)\nfields."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\nchess.move({ from: 'g2', to: 'g3' })\n// -> { color: 'w', from: 'g2', to: 'g3', flags: 'n', piece: 'p', san: 'g3' }\n"})}),"\n",(0,o.jsx)(n.h4,{id:"move---permissive-parser",children:".move() - Permissive Parser"}),"\n",(0,o.jsxs)(n.p,{children:["The permissive (default) move parser can be used to parse a variety of\nnon-standard move notations. Users may specify an ",(0,o.jsx)(n.code,{children:"\\{ strict: true \\}"})," flag to\nverify that all supplied moves adhere to the Standard Algebraic Notation\nspecification."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\n// permissive parser accepts various forms of algebraic notation\nchess.move('e2e4')\nchess.move('e7-e5')\nchess.move('Pf2-f4')\nchess.move('ef4') // missing 'x' in capture\nchess.move('Ng1-f3')\nchess.move('d7xd6') // ignore 'x' when not a capture\nchess.move('d4')\n\n// correctly parses incorrectly disambiguated moves\nchess.load('r2qkbnr/ppp2ppp/2n5/1B2pQ2/4P3/8/PPP2PPP/RNB1K2R b KQkq - 3 7')\n\nchess.move('Nge7') // Ne7 is unambiguous because the knight on c6 is pinned\nchess.undo()\nchess.move('Nge7', { strict: true }) // strict SAN requires Ne7\n// Error: Invalid move: Nge7\n"})}),"\n",(0,o.jsx)(n.h3,{id:"moves-piece-piece-square-square-verbose-boolean-",children:".moves({ piece?: Piece, square?: Square, verbose?: Boolean }?)"}),"\n",(0,o.jsx)(n.p,{children:"Returns a list of legal moves from the current position. This function takes an\noptional object which can be used to generate detailed move objects or to\nrestrict the move generator to specific squares or pieces."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\nchess.moves()\n// -> ['a3', 'a4', 'b3', 'b4', 'c3', 'c4', 'd3', 'd4', 'e3', 'e4',\n//     'f3', 'f4', 'g3', 'g4', 'h3', 'h4', 'Na3', 'Nc3', 'Nf3', 'Nh3']\n\nchess.moves({ square: 'e2' }) // single square move generation\n// -> ['e3', 'e4']\n\nchess.moves({ piece: 'n' }) // generate moves for piece type\n// ['Na3', 'Nc3', 'Nf3', 'Nh3']\n\nchess.moves({ verbose: true }) // return verbose moves\n// -> [{ color: 'w', from: 'a2', to: 'a3',\n//       flags: 'n', piece: 'p',\n//       san 'a3', 'lan', 'a2a3',\n//       before: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n//       after: 'rnbqkbnr/pppppppp/8/8/8/P7/1PPPPPPP/RNBQKBNR b KQkq - 0 1'\n//       # a `captured` field is included when the move is a capture\n//       # a `promotion` field is included when the move is a promotion\n//     },\n//     ...\n//     ]\n"})}),"\n",(0,o.jsx)(n.h4,{id:"move-objects-eg-when--verbose-true-",children:"Move Objects (e.g. when { verbose: true })"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"color"})," field indicates the color of the moving piece (",(0,o.jsx)(n.code,{children:"w"})," or ",(0,o.jsx)(n.code,{children:"b"}),")."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"from"})," and ",(0,o.jsx)(n.code,{children:"to"})," fields are from and to squares in algebraic notation."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"piece"}),", ",(0,o.jsx)(n.code,{children:"captured"}),", and ",(0,o.jsx)(n.code,{children:"promotion"})," fields contain the lowercase\nrepresentation of the applicable piece (",(0,o.jsx)(n.code,{children:"pnbrqk"}),"). The ",(0,o.jsx)(n.code,{children:"captured"})," and\n",(0,o.jsx)(n.code,{children:"promotion"})," fields are only present when the move is a valid capture or\npromotion."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"san"})," field is the move in Standard Algebraic Notation (SAN). The ",(0,o.jsx)(n.code,{children:"lan"}),"\nfield is the move in Long Algebraic Notation (LAN)."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"before"})," and ",(0,o.jsx)(n.code,{children:"after"})," keys contain the FEN of the position before and after\nthe move."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"flags"})," field contains one or more of the string values:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"n"})," - a non-capture"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"b"})," - a pawn push of two squares"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"e"})," - an en passant capture"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"c"})," - a standard capture"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"p"})," - a promotion"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"k"})," - kingside castling"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"q"})," - queenside castling"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"flags"})," value of ",(0,o.jsx)(n.code,{children:"pc"})," would mean that a pawn captured a piece on the 8th rank\nand promoted."]}),"\n",(0,o.jsx)(n.h3,{id:"pgn-options-",children:".pgn([ options ])"}),"\n",(0,o.jsx)(n.p,{children:"Returns the game in PGN format. Options is an optional parameter which may\ninclude max width and/or a newline character settings."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\nchess.header('White', 'Plunky', 'Black', 'Plinkie')\nchess.move('e4')\nchess.move('e5')\nchess.move('Nc3')\nchess.move('Nc6')\n\nchess.pgn({ maxWidth: 5, newline: '<br />' })\n// -> '[White \"Plunky\"]<br />[Black \"Plinkie\"]<br /><br />1. e4 e5<br />2. Nc3 Nc6'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"putpiece-square",children:".put(piece, square)"}),"\n",(0,o.jsxs)(n.p,{children:["Place a piece on the square where piece is an object with the form { type: ...,\ncolor: ... }. Returns true if the piece was successfully placed, otherwise, the\nboard remains unchanged and false is returned. ",(0,o.jsx)(n.code,{children:"put()"})," will fail when passed an\ninvalid piece or square, or when two or more kings of the same color are placed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"chess.clear()\n\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n// -> true\nchess.put({ type: 'k', color: 'w' }, 'h1') // shorthand\n// -> true\n\nchess.fen()\n// -> '8/8/8/p7/8/8/8/7K w - - 0 0'\n\nchess.put({ type: 'z', color: 'w' }, 'a1') // invalid piece\n// -> false\n\nchess.clear()\n\nchess.put({ type: 'k', color: 'w' }, 'a1')\n// -> true\n\nchess.put({ type: 'k', color: 'w' }, 'h1') // fail - two kings\n// -> false\n"})}),"\n",(0,o.jsx)(n.h3,{id:"removesquare",children:".remove(square)"}),"\n",(0,o.jsxs)(n.p,{children:["Remove and return the piece on ",(0,o.jsx)(n.em,{children:"square"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"chess.clear()\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\nchess.put({ type: chess.KING, color: chess.WHITE }, 'h1') // put a white king on h1\n\nchess.remove('a5')\n// -> { type: 'p', color: 'b' },\nchess.remove('h1')\n// -> { type: 'k', color: 'w' },\nchess.remove('e1')\n// -> null\n"})}),"\n",(0,o.jsx)(n.h3,{id:"reset",children:".reset()"}),"\n",(0,o.jsx)(n.p,{children:"Reset the board to the initial starting position."}),"\n",(0,o.jsx)(n.h3,{id:"setcommentcomment",children:".setComment(comment)"}),"\n",(0,o.jsx)(n.p,{children:"Comment on the current position."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\nchess.move('e4')\nchess.setComment(\"king's pawn opening\")\n\nchess.pgn()\n// -> \"1. e4 {king's pawn opening}\"\n"})}),"\n",(0,o.jsx)(n.h3,{id:"squarecolorsquare",children:".squareColor(square)"}),"\n",(0,o.jsx)(n.p,{children:"Returns the color of the square ('light' or 'dark')."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = Chess()\nchess.squareColor('h1')\n// -> 'light'\nchess.squareColor('a7')\n// -> 'dark'\nchess.squareColor('bogus square')\n// -> null\n"})}),"\n",(0,o.jsx)(n.h3,{id:"turn",children:".turn()"}),"\n",(0,o.jsx)(n.p,{children:"Returns the current side to move."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"chess.load('rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1')\nchess.turn()\n// -> 'b'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"undo",children:".undo()"}),"\n",(0,o.jsx)(n.p,{children:"Takeback the last half-move, returning a move object if successful, otherwise\nnull."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const chess = new Chess()\n\nchess.fen()\n// -> 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nchess.move('e4')\nchess.fen()\n// -> 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1'\n\nchess.undo()\n//  {\n//    color: 'w',\n//    piece: 'p',\n//    from: 'e2',\n//    to: 'e4',\n//    san: 'e4',\n//    flags: 'b',\n//    lan: 'e2e4',\n//    before: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\n//    after: 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1'\n//  }\n\nchess.fen()\n// -> 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nchess.undo()\n// -> null\n"})}),"\n",(0,o.jsx)(n.h3,{id:"validatefenfen",children:".validateFen(fen):"}),"\n",(0,o.jsx)(n.p,{children:"Returns a validation object specifying validity or the errors found within the\nFEN string."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"chess.validateFen('2n1r3/p1k2pp1/B1p3b1/P7/5bP1/2N1B3/1P2KP2/2R5 b - - 4 25')\n// -> { ok: true }\n\nchess.validateFen('4r3/8/X12XPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45')\n// -> { ok: false,\n//     error: '1st field (piece positions) is invalid [invalid piece].' }\n"})}),"\n",(0,o.jsx)(n.h2,{id:"bugs",children:"BUGS"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The en passant square and castling flags aren't adjusted when using the\nput/remove functions (workaround: use .load() instead)"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);