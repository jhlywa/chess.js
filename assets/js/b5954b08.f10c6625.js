"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6400],{3101:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"index","title":"chess.js","description":"GitHub Workflow Status","source":"@site/versioned_docs/version-v0.13.2/index.md","sourceDirName":".","slug":"/","permalink":"/chess.js/v0.13.2/","draft":false,"unlisted":false,"tags":[],"version":"v0.13.2","frontMatter":{}}');var c=s(4848),o=s(8453);const a={},i="chess.js",t={},l=[{value:"Installation",id:"installation",level:2},{value:"Example Code",id:"example-code",level:2},{value:"User Interface",id:"user-interface",level:2},{value:"API",id:"api",level:2},{value:"Constructor: Chess([ fen ])",id:"constructor-chess-fen-",level:3},{value:".ascii()",id:"ascii",level:3},{value:".board()",id:"board",level:3},{value:".clear()",id:"clear",level:3},{value:".delete_comment()",id:"delete_comment",level:3},{value:".delete_comments()",id:"delete_comments",level:3},{value:".fen()",id:"fen",level:3},{value:".game_over()",id:"game_over",level:3},{value:".get(square)",id:"getsquare",level:3},{value:".get_comment()",id:"get_comment",level:3},{value:".get_comments()",id:"get_comments",level:3},{value:".header()",id:"header",level:3},{value:".history([ options ])",id:"history-options-",level:3},{value:".in_check()",id:"in_check",level:3},{value:".in_checkmate()",id:"in_checkmate",level:3},{value:".in_draw()",id:"in_draw",level:3},{value:".in_stalemate()",id:"in_stalemate",level:3},{value:".in_threefold_repetition()",id:"in_threefold_repetition",level:3},{value:".insufficient_material()",id:"insufficient_material",level:3},{value:".load(fen)",id:"loadfen",level:3},{value:".load_pgn(pgn, [ options ])",id:"load_pgnpgn--options-",level:3},{value:".move(move, [ options ])",id:"movemove--options-",level:3},{value:".moves([ options ])",id:"moves-options-",level:3},{value:".pgn([ options ])",id:"pgn-options-",level:3},{value:".put(piece, square)",id:"putpiece-square",level:3},{value:".remove(square)",id:"removesquare",level:3},{value:".reset()",id:"reset",level:3},{value:".set_comment(comment)",id:"set_commentcomment",level:3},{value:".square_color(square)",id:"square_colorsquare",level:3},{value:".turn()",id:"turn",level:3},{value:".undo()",id:"undo",level:3},{value:".validate_fen(fen):",id:"validate_fenfen",level:3},{value:"MUSIC",id:"music",level:2},{value:"BUGS",id:"bugs",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"chessjs",children:"chess.js"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.img,{src:"https://img.shields.io/github/workflow/status/jhlywa/chess.js/Node.js%20CI",alt:"GitHub Workflow Status"}),"\n",(0,c.jsx)(n.img,{src:"https://img.shields.io/npm/v/chess.js?color=blue",alt:"npm"}),"\n",(0,c.jsx)(n.img,{src:"https://img.shields.io/npm/dm/chess.js",alt:"npm"})]}),"\n",(0,c.jsx)(n.p,{children:"chess.js is a Javascript chess library that is used for chess move\ngeneration/validation, piece placement/movement, and check/checkmate/stalemate\ndetection - basically everything but the AI."}),"\n",(0,c.jsx)(n.p,{children:"chess.js has been extensively tested in node.js and most modern browsers."}),"\n",(0,c.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,c.jsx)(n.p,{children:"To install the stable version:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"# NPM\nnpm install chess.js\n\n# Yarn\nyarn add chess.js\n"})}),"\n",(0,c.jsx)(n.h2,{id:"example-code",children:"Example Code"}),"\n",(0,c.jsx)(n.p,{children:"The code below plays a random game of chess:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"import { Chess } from 'chess.js';\n\nconst chess = new Chess()\n\nwhile (!chess.game_over()) {\n    const moves = chess.moves()\n    const move = moves[Math.floor(Math.random() * moves.length)]\n    chess.move(move)\n}\nconsole.log(chess.pgn())\n"})}),"\n",(0,c.jsx)(n.h2,{id:"user-interface",children:"User Interface"}),"\n",(0,c.jsxs)(n.p,{children:["By design, chess.js is headless and does not include user interface.  Many\ndevelopers have had success integrating chess.js with the\n",(0,c.jsx)(n.a,{href:"http://chessboardjs.com",children:"chessboard.js"})," library. See\n",(0,c.jsx)(n.a,{href:"http://chessboardjs.com/examples#5002",children:"chessboard.js - Random vs Random"})," for\nan example."]}),"\n",(0,c.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,c.jsx)(n.h3,{id:"constructor-chess-fen-",children:"Constructor: Chess([ fen ])"}),"\n",(0,c.jsxs)(n.p,{children:["The Chess() constructor takes an optional parameter which specifies the board configuration\nin ",(0,c.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation",children:"Forsyth-Edwards Notation"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// board defaults to the starting position when called with no parameters\nconst chess = new Chess()\n\n// pass in a FEN string to load a particular position\nconst chess = new Chess(\n    'r1k4r/p2nb1p1/2b4p/1p1n1p2/2PP4/3Q1NB1/1P3PPP/R5K1 b - c3 0 19'\n)\n"})}),"\n",(0,c.jsx)(n.h3,{id:"ascii",children:".ascii()"}),"\n",(0,c.jsx)(n.p,{children:"Returns a string containing an ASCII diagram of the current position."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\n\n// make some moves\nchess.move('e4')\nchess.move('e5')\nchess.move('f4')\n\nchess.ascii()\n// -> '   +------------------------+\n//      8 | r  n  b  q  k  b  n  r |\n//      7 | p  p  p  p  .  p  p  p |\n//      6 | .  .  .  .  .  .  .  . |\n//      5 | .  .  .  .  p  .  .  . |\n//      4 | .  .  .  .  P  P  .  . |\n//      3 | .  .  .  .  .  .  .  . |\n//      2 | P  P  P  P  .  .  P  P |\n//      1 | R  N  B  Q  K  B  N  R |\n//        +------------------------+\n//          a  b  c  d  e  f  g  h'\n"})}),"\n",(0,c.jsx)(n.h3,{id:"board",children:".board()"}),"\n",(0,c.jsxs)(n.p,{children:["Returns an 2D array representation of the current position. Empty squares are\nrepresented by ",(0,c.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\n\nchess.board()\n// -> [[{square: 'a8', type: 'r', color: 'b'},\n        {square: 'b8', type: 'n', color: 'b'},\n        {square: 'c8', type: 'b', color: 'b'},\n        {square: 'd8', type: 'q', color: 'b'},\n        {square: 'e8', type: 'k', color: 'b'},\n        {square: 'f8', type: 'b', color: 'b'},\n        {square: 'g8', type: 'n', color: 'b'},\n        {square: 'h8', type: 'r', color: 'b'}],\n        [...],\n        [...],\n        [...],\n        [...],\n        [...],\n        [{square: 'a1', type: 'r', color: 'w'},\n         {square: 'b1', type: 'n', color: 'w'},\n         {square: 'c1', type: 'b', color: 'w'},\n         {square: 'd1', type: 'q', color: 'w'},\n         {square: 'e1', type: 'k', color: 'w'},\n         {square: 'f1', type: 'b', color: 'w'},\n         {square: 'g1', type: 'n', color: 'w'},\n         {square: 'h1', type: 'r', color: 'w'}]]\n"})}),"\n",(0,c.jsx)(n.h3,{id:"clear",children:".clear()"}),"\n",(0,c.jsx)(n.p,{children:"Clears the board."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"chess.clear()\nchess.fen()\n// -> '8/8/8/8/8/8/8/8 w - - 0 1' <- empty board\n"})}),"\n",(0,c.jsx)(n.h3,{id:"delete_comment",children:".delete_comment()"}),"\n",(0,c.jsx)(n.p,{children:"Delete and return the comment for the current position, if it exists."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const chess = new Chess()\n\nchess.load_pgn("1. e4 e5 2. Nf3 Nc6 3. Bc4 Bc5 {giuoco piano} *")\n\nchess.get_comment()\n// -> "giuoco piano"\n\nchess.delete_comment()\n// -> "giuoco piano"\n\nchess.get_comment()\n// -> undefined\n'})}),"\n",(0,c.jsx)(n.h3,{id:"delete_comments",children:".delete_comments()"}),"\n",(0,c.jsx)(n.p,{children:"Delete and return comments for all positions."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const chess = new Chess()\n\nchess.load_pgn("1. e4 e5 {king\'s pawn opening} 2. Nf3 Nc6 3. Bc4 Bc5 {giuoco piano} *")\n\nchess.delete_comments()\n// -> [\n//     {\n//       fen: "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2",\n//       comment: "king\'s pawn opening"\n//     },\n//     {\n//       fen: "r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3",\n//       comment: "giuoco piano"\n//     }\n//    ]\n\nchess.get_comments()\n// -> []\n'})}),"\n",(0,c.jsx)(n.h3,{id:"fen",children:".fen()"}),"\n",(0,c.jsx)(n.p,{children:"Returns the FEN string for the current position."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\n\n// make some moves\nchess.move('e4')\nchess.move('e5')\nchess.move('f4')\n\nchess.fen()\n// -> 'rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq f3 0 2'\n"})}),"\n",(0,c.jsx)(n.h3,{id:"game_over",children:".game_over()"}),"\n",(0,c.jsx)(n.p,{children:"Returns true if the game has ended via checkmate, stalemate, draw, threefold repetition, or insufficient material. Otherwise, returns false."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\nchess.game_over()\n// -> false\n\n// stalemate\nchess.load('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78')\nchess.game_over()\n// -> true\n\n// checkmate\nchess.load('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3')\nchess.game_over()\n// -> true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"getsquare",children:".get(square)"}),"\n",(0,c.jsx)(n.p,{children:"Returns the piece on the square:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"chess.clear()\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n\nchess.get('a5')\n// -> { type: 'p', color: 'b' },\nchess.get('a6')\n// -> null\n"})}),"\n",(0,c.jsx)(n.h3,{id:"get_comment",children:".get_comment()"}),"\n",(0,c.jsx)(n.p,{children:"Retrieve the comment for the current position, if it exists."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const chess = new Chess()\n\nchess.load_pgn("1. e4 e5 2. Nf3 Nc6 3. Bc4 Bc5 {giuoco piano} *")\n\nchess.get_comment()\n// -> "giuoco piano"\n'})}),"\n",(0,c.jsx)(n.h3,{id:"get_comments",children:".get_comments()"}),"\n",(0,c.jsx)(n.p,{children:"Retrieve comments for all positions."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const chess = new Chess()\n\nchess.load_pgn("1. e4 e5 {king\'s pawn opening} 2. Nf3 Nc6 3. Bc4 Bc5 {giuoco piano} *")\n\nchess.get_comments()\n// -> [\n//     {\n//       fen: "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2",\n//       comment: "king\'s pawn opening"\n//     },\n//     {\n//       fen: "r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3",\n//       comment: "giuoco piano"\n//     }\n//    ]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"header",children:".header()"}),"\n",(0,c.jsx)(n.p,{children:"Allows header information to be added to PGN output. Any number of key/value\npairs can be passed to .header()."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"chess.header('White', 'Robert James Fischer')\nchess.header('Black', 'Mikhail Tal')\n\n// or\n\nchess.header('White', 'Morphy', 'Black', 'Anderssen', 'Date', '1858-??-??')\n"})}),"\n",(0,c.jsx)(n.p,{children:"Calling .header() without any arguments returns the header information as an object."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"chess.header()\n// -> { White: 'Morphy', Black: 'Anderssen', Date: '1858-??-??' }\n"})}),"\n",(0,c.jsx)(n.h3,{id:"history-options-",children:".history([ options ])"}),"\n",(0,c.jsx)(n.p,{children:"Returns a list containing the moves of the current game. Options is an optional\nparameter which may contain a 'verbose' flag. See .moves() for a description of the\nverbose move fields."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\nchess.move('e4')\nchess.move('e5')\nchess.move('f4')\nchess.move('exf4')\n\nchess.history()\n// -> ['e4', 'e5', 'f4', 'exf4']\n\nchess.history({ verbose: true })\n// -> [{ color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' },\n//     { color: 'b', from: 'e7', to: 'e5', flags: 'b', piece: 'p', san: 'e5' },\n//     { color: 'w', from: 'f2', to: 'f4', flags: 'b', piece: 'p', san: 'f4' },\n//     { color: 'b', from: 'e5', to: 'f4', flags: 'c', piece: 'p', captured: 'p', san: 'exf4' }]\n"})}),"\n",(0,c.jsx)(n.h3,{id:"in_check",children:".in_check()"}),"\n",(0,c.jsx)(n.p,{children:"Returns true or false if the side to move is in check."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess(\n    'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3'\n)\nchess.in_check()\n// -> true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"in_checkmate",children:".in_checkmate()"}),"\n",(0,c.jsx)(n.p,{children:"Returns true or false if the side to move has been checkmated."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess(\n    'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3'\n)\nchess.in_checkmate()\n// -> true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"in_draw",children:".in_draw()"}),"\n",(0,c.jsx)(n.p,{children:"Returns true or false if the game is drawn (50-move rule or insufficient material)."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78')\nchess.in_draw()\n// -> true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"in_stalemate",children:".in_stalemate()"}),"\n",(0,c.jsx)(n.p,{children:"Returns true or false if the side to move has been stalemated."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78')\nchess.in_stalemate()\n// -> true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"in_threefold_repetition",children:".in_threefold_repetition()"}),"\n",(0,c.jsx)(n.p,{children:"Returns true or false if the current board position has occurred three or more\ntimes."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')\n// -> true\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 1st time\nchess.in_threefold_repetition()\n// -> false\n\nchess.move('Nf3') chess.move('Nf6') chess.move('Ng1') chess.move('Ng8')\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 2nd time\nchess.in_threefold_repetition()\n// -> false\n\nchess.move('Nf3') chess.move('Nf6') chess.move('Ng1') chess.move('Ng8')\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 3rd time\nchess.in_threefold_repetition()\n// -> true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"insufficient_material",children:".insufficient_material()"}),"\n",(0,c.jsx)(n.p,{children:"Returns true if the game is drawn due to insufficient material (K vs. K,\nK vs. KB, or K vs. KN) otherwise false."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess('k7/8/n7/8/8/8/8/7K b - - 0 1')\nchess.insufficient_material()\n// -> true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"loadfen",children:".load(fen)"}),"\n",(0,c.jsx)(n.p,{children:"The board is cleared, and the FEN string is loaded. Returns true if the position was\nsuccessfully loaded, otherwise false."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\nchess.load('4r3/8/2p2PPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45')\n// -> true\n\nchess.load('4r3/8/X12XPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45')\n// -> false, bad piece X\n"})}),"\n",(0,c.jsx)(n.h3,{id:"load_pgnpgn--options-",children:".load_pgn(pgn, [ options ])"}),"\n",(0,c.jsxs)(n.p,{children:["Load the moves of a game stored in\n",(0,c.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/Portable_Game_Notation",children:"Portable Game Notation"}),".\n",(0,c.jsx)(n.code,{children:"pgn"})," should be a string. Options is an optional ",(0,c.jsx)(n.code,{children:"object"})," which may contain\na string ",(0,c.jsx)(n.code,{children:"newline_char"})," and a boolean ",(0,c.jsx)(n.code,{children:"sloppy"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"newline_char"})," is a string representation of a valid RegExp fragment and is\nused to process the PGN. It defaults to ",(0,c.jsx)(n.code,{children:"\\r?\\n"}),". Special characters\nshould not be pre-escaped, but any literal special characters should be escaped\nas is normal for a RegExp. Keep in mind that backslashes in JavaScript strings\nmust themselves be escaped (see ",(0,c.jsx)(n.code,{children:"sloppy_pgn"})," example below). Avoid using\na ",(0,c.jsx)(n.code,{children:"newline_char"})," that may occur elsewhere in a PGN, such as ",(0,c.jsx)(n.code,{children:"."})," or ",(0,c.jsx)(n.code,{children:"x"}),", as this\nwill result in unexpected behavior."]}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"sloppy"})," flag is a boolean that permits chess.js to parse moves in\nnon-standard notations. See ",(0,c.jsx)(n.code,{children:".move"})," documentation for more information about\nnon-SAN notations."]}),"\n",(0,c.jsxs)(n.p,{children:["The method will return ",(0,c.jsx)(n.code,{children:"true"})," if the PGN was parsed successfully, otherwise ",(0,c.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\nconst pgn = [\n    '[Event \"Casual Game\"]',\n    '[Site \"Berlin GER\"]',\n    '[Date \"1852.??.??\"]',\n    '[EventDate \"?\"]',\n    '[Round \"?\"]',\n    '[Result \"1-0\"]',\n    '[White \"Adolf Anderssen\"]',\n    '[Black \"Jean Dufresne\"]',\n    '[ECO \"C52\"]',\n    '[WhiteElo \"?\"]',\n    '[BlackElo \"?\"]',\n    '[PlyCount \"47\"]',\n    '',\n    '1.e4 e5 2.Nf3 Nc6 3.Bc4 Bc5 4.b4 Bxb4 5.c3 Ba5 6.d4 exd4 7.O-O',\n    'd3 8.Qb3 Qf6 9.e5 Qg6 10.Re1 Nge7 11.Ba3 b5 12.Qxb5 Rb8 13.Qa4',\n    'Bb6 14.Nbd2 Bb7 15.Ne4 Qf5 16.Bxd3 Qh5 17.Nf6+ gxf6 18.exf6',\n    'Rg8 19.Rad1 Qxf3 20.Rxe7+ Nxe7 21.Qxd7+ Kxd7 22.Bf5+ Ke8',\n    '23.Bd7+ Kf8 24.Bxe7# 1-0'\n]\n\nchess.load_pgn(pgn.join('\\n'))\n// -> true\n\nchess.fen()\n// -> 1r3kr1/pbpBBp1p/1b3P2/8/8/2P2q2/P4PPP/3R2K1 b - - 0 24\n\nchess.ascii()\n// -> '  +------------------------+\n//     8 | .  r  .  .  .  k  r  . |\n//     7 | p  b  p  B  B  p  .  p |\n//     6 | .  b  .  .  .  P  .  . |\n//     5 | .  .  .  .  .  .  .  . |\n//     4 | .  .  .  .  .  .  .  . |\n//     3 | .  .  P  .  .  q  .  . |\n//     2 | P  .  .  .  .  P  P  P |\n//     1 | .  .  .  R  .  .  K  . |\n//       +------------------------+\n//         a  b  c  d  e  f  g  h'\n\n// Parse non-standard move formats and unusual line separators\nconst sloppy_pgn = [\n    '[Event \"Wijk aan Zee (Netherlands)\"]',\n    '[Date \"1971.01.26\"]',\n    '[Result \"1-0\"]',\n    '[White \"Tigran Vartanovich Petrosian\"]',\n    '[Black \"Hans Ree\"]',\n    '[ECO \"A29\"]',\n    '',\n    '1. Pc2c4 Pe7e5', // non-standard\n    '2. Nc3 Nf6',\n    '3. Nf3 Nc6',\n    '4. g2g3 Bb4', // non-standard\n    '5. Nd5 Nxd5',\n    '6. c4xd5 e5-e4', // non-standard\n    '7. dxc6 exf3',\n    '8. Qb3 1-0'\n].join('|')\n\nconst options = {\n    newline_char: '\\\\|', // Literal '|' character escaped\n    sloppy: true\n}\n\nchess.load_pgn(sloppy_pgn)\n// -> false\n\nchess.load_pgn(sloppy_pgn, options)\n// -> true\n\nchess.fen()\n// -> 'r1bqk2r/pppp1ppp/2P5/8/1b6/1Q3pP1/PP1PPP1P/R1B1KB1R b KQkq - 1 8'\n"})}),"\n",(0,c.jsx)(n.h3,{id:"movemove--options-",children:".move(move, [ options ])"}),"\n",(0,c.jsx)(n.p,{children:"Attempts to make a move on the board, returning a move object if the move was\nlegal, otherwise null. The .move function can be called two ways, by passing\na string in Standard Algebraic Notation (SAN):"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\n\nchess.move('e4')\n// -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' }\n\nchess.move('nf6') // SAN is case sensitive!!\n// -> null\n\nchess.move('Nf6')\n// -> { color: 'b', from: 'g8', to: 'f6', flags: 'n', piece: 'n', san: 'Nf6' }\n"})}),"\n",(0,c.jsx)(n.p,{children:"Or by passing .move() a move object (only the 'to', 'from', and when necessary\n'promotion', fields are needed):"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\n\nchess.move({ from: 'g2', to: 'g3' })\n// -> { color: 'w', from: 'g2', to: 'g3', flags: 'n', piece: 'p', san: 'g3' }\n"})}),"\n",(0,c.jsx)(n.p,{children:"An optional sloppy flag can be used to parse a variety of non-standard move\nnotations:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\n\n// various forms of Long Algebraic Notation\nchess.move('e2e4', { sloppy: true })\n// -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' }\nchess.move('e7-e5', { sloppy: true })\n// -> { color: 'b', from: 'e7', to: 'e5', flags: 'b', piece: 'p', san: 'e5' }\nchess.move('Pf2f4', { sloppy: true })\n// -> { color: 'w', from: 'f2', to: 'f4', flags: 'b', piece: 'p', san: 'f4' }\nchess.move('Pe5xf4', { sloppy: true })\n// -> { color: 'b', from: 'e5', to: 'f4', flags: 'c', piece: 'p', captured: 'p', san: 'exf4' }\n\n// correctly parses incorrectly disambiguated moves\nchess = new Chess(\n    'r2qkbnr/ppp2ppp/2n5/1B2pQ2/4P3/8/PPP2PPP/RNB1K2R b KQkq - 3 7'\n)\n\nchess.move('Nge7') // Ne7 is unambiguous because the knight on c6 is pinned\n// -> null\n\nchess.move('Nge7', { sloppy: true })\n// -> { color: 'b', from: 'g8', to: 'e7', flags: 'n', piece: 'n', san: 'Ne7' }\n"})}),"\n",(0,c.jsx)(n.h3,{id:"moves-options-",children:".moves([ options ])"}),"\n",(0,c.jsx)(n.p,{children:"Returns a list of legal moves from the current position. The function takes an optional parameter which controls the single-square move generation and verbosity."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\nchess.moves()\n// -> ['a3', 'a4', 'b3', 'b4', 'c3', 'c4', 'd3', 'd4', 'e3', 'e4',\n//     'f3', 'f4', 'g3', 'g4', 'h3', 'h4', 'Na3', 'Nc3', 'Nf3', 'Nh3']\n\nchess.moves({ square: 'e2' })\n// -> ['e3', 'e4']\n\nchess.moves({ square: 'e9' }) // invalid square\n// -> []\n\nchess.moves({ verbose: true })\n// -> [{ color: 'w', from: 'a2', to: 'a3',\n//       flags: 'n', piece: 'p', san 'a3'\n//       # a captured: key is included when the move is a capture\n//       # a promotion: key is included when the move is a promotion\n//     },\n//     ...\n//     ]\n"})}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.em,{children:"piece"}),", ",(0,c.jsx)(n.em,{children:"captured"}),", and ",(0,c.jsx)(n.em,{children:"promotion"})," fields contain the lowercase\nrepresentation of the applicable piece."]}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.em,{children:"flags"})," field in verbose mode may contain one or more of the following values:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"'n' - a non-capture"}),"\n",(0,c.jsx)(n.li,{children:"'b' - a pawn push of two squares"}),"\n",(0,c.jsx)(n.li,{children:"'e' - an en passant capture"}),"\n",(0,c.jsx)(n.li,{children:"'c' - a standard capture"}),"\n",(0,c.jsx)(n.li,{children:"'p' - a promotion"}),"\n",(0,c.jsx)(n.li,{children:"'k' - kingside castling"}),"\n",(0,c.jsx)(n.li,{children:"'q' - queenside castling"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"A flag of 'pc' would mean that a pawn captured a piece on the 8th rank and promoted."}),"\n",(0,c.jsx)(n.h3,{id:"pgn-options-",children:".pgn([ options ])"}),"\n",(0,c.jsx)(n.p,{children:"Returns the game in PGN format. Options is an optional parameter which may include\nmax width and/or a newline character settings."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\nchess.header('White', 'Plunky', 'Black', 'Plinkie')\nchess.move('e4')\nchess.move('e5')\nchess.move('Nc3')\nchess.move('Nc6')\n\nchess.pgn({ max_width: 5, newline_char: '<br />' })\n// -> '[White \"Plunky\"]<br />[Black \"Plinkie\"]<br /><br />1. e4 e5<br />2. Nc3 Nc6'\n"})}),"\n",(0,c.jsx)(n.h3,{id:"putpiece-square",children:".put(piece, square)"}),"\n",(0,c.jsxs)(n.p,{children:["Place a piece on the square where piece is an object with the form\n{ type: ..., color: ... }. Returns true if the piece was successfully placed,\notherwise, the board remains unchanged and false is returned. ",(0,c.jsx)(n.code,{children:"put()"})," will fail\nwhen passed an invalid piece or square, or when two or more kings of the\nsame color are placed."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"chess.clear()\n\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n// -> true\nchess.put({ type: 'k', color: 'w' }, 'h1') // shorthand\n// -> true\n\nchess.fen()\n// -> '8/8/8/p7/8/8/8/7K w - - 0 0'\n\nchess.put({ type: 'z', color: 'w' }, 'a1') // invalid piece\n// -> false\n\nchess.clear()\n\nchess.put({ type: 'k', color: 'w' }, 'a1')\n// -> true\n\nchess.put({ type: 'k', color: 'w' }, 'h1') // fail - two kings\n// -> false\n"})}),"\n",(0,c.jsx)(n.h3,{id:"removesquare",children:".remove(square)"}),"\n",(0,c.jsxs)(n.p,{children:["Remove and return the piece on ",(0,c.jsx)(n.em,{children:"square"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"chess.clear()\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\nchess.put({ type: chess.KING, color: chess.WHITE }, 'h1') // put a white king on h1\n\nchess.remove('a5')\n// -> { type: 'p', color: 'b' },\nchess.remove('h1')\n// -> { type: 'k', color: 'w' },\nchess.remove('e1')\n// -> null\n"})}),"\n",(0,c.jsx)(n.h3,{id:"reset",children:".reset()"}),"\n",(0,c.jsx)(n.p,{children:"Reset the board to the initial starting position."}),"\n",(0,c.jsx)(n.h3,{id:"set_commentcomment",children:".set_comment(comment)"}),"\n",(0,c.jsx)(n.p,{children:"Comment on the current position."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const chess = new Chess()\n\nchess.move("e4")\nchess.set_comment("king\'s pawn opening")\n\nchess.pgn()\n// -> "1. e4 {king\'s pawn opening}"\n'})}),"\n",(0,c.jsx)(n.h3,{id:"square_colorsquare",children:".square_color(square)"}),"\n",(0,c.jsx)(n.p,{children:"Returns the color of the square ('light' or 'dark')."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = Chess()\nchess.square_color('h1')\n// -> 'light'\nchess.square_color('a7')\n// -> 'dark'\nchess.square_color('bogus square')\n// -> null\n"})}),"\n",(0,c.jsx)(n.h3,{id:"turn",children:".turn()"}),"\n",(0,c.jsx)(n.p,{children:"Returns the current side to move."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"chess.load('rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1')\nchess.turn()\n// -> 'b'\n"})}),"\n",(0,c.jsx)(n.h3,{id:"undo",children:".undo()"}),"\n",(0,c.jsx)(n.p,{children:"Takeback the last half-move, returning a move object if successful, otherwise null."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const chess = new Chess()\n\nchess.fen()\n// -> 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nchess.move('e4')\nchess.fen()\n// -> 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1'\n\nchess.undo()\n// -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' }\nchess.fen()\n// -> 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nchess.undo()\n// -> null\n"})}),"\n",(0,c.jsx)(n.h3,{id:"validate_fenfen",children:".validate_fen(fen):"}),"\n",(0,c.jsx)(n.p,{children:"Returns a validation object specifying validity or the errors found within the\nFEN string."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"chess.validate_fen('2n1r3/p1k2pp1/B1p3b1/P7/5bP1/2N1B3/1P2KP2/2R5 b - - 4 25')\n// -> { valid: true, error_number: 0, error: 'No errors.' }\n\nchess.validate_fen('4r3/8/X12XPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45')\n// -> { valid: false, error_number: 9,\n//     error: '1st field (piece positions) is invalid [invalid piece].' }\n"})}),"\n",(0,c.jsx)(n.h2,{id:"music",children:"MUSIC"}),"\n",(0,c.jsx)(n.p,{children:"Musical support provided by:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://www.youtube.com/watch?v=z-D9rdJWfWs",children:"The Grateful Dead"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://www.youtube.com/watch?v=auEfZVcYp64",children:"Umphrey's McGee"})}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"bugs",children:"BUGS"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"The en passant square and castling flags aren't adjusted when using the put/remove functions (workaround: use .load() instead)"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(6540);const c={},o=r.createContext(c);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);